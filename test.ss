(define (prog expr_list var_list)
    (cond 
        ((equal? car(expr_list) 'mylet) (mylet cadr(expr_list) caddr(expr_list) cadddr(expr_list) var_list))
        ((equal? car(expr_list) 'mymul) (mymul cadr(expr_list) caddr(expr_list) var_list))
        ((equal? car(expr_list) 'myadd) (myadd cadr(expr_list) caddr(expr_list) var_list))
        ((equal? car(expr_list) 'myneg) (myneg cadr(expr_list)))
        ((equal? car(expr_list) 'myignore) (myignore))
        ((symbol? car(expr_list)) car(expr_list))
        ((integer? car(expr_list)) consequent2)
        )
)
(define (myadd lexpr rexpr var_list)
    (+ (prog lexpr var_list) (prog rexpr var_list))
)
(define (myignore)
    (+ 0 0)
)
(define (mymul lexpr rexpr var_list)
    (* (prog lexpr var_list) (prog rexpr var_list))
)
(define (myneg expr var_list)
    (* -1 (prog expr var_list))
)
(define (mylet iden lexpr rexpr var_list)
    (prog rexpr (cons '(iden (prog lexpr var_list)) var_list))
)

;    (define (test lis)
;  (car (cadr lis))
;  (cadddr (cadr lis))
;)
;(test '(prog (mylet a 66 (myadd (mylet b (mymul 2 4) (myadd 2 b)) (mymul 2 a)))))